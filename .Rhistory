library(devtools)
load_all()
exists("create_bins", where = globalenv(), inherits = FALSE)
create_bins(ll = 0, ul = 100, numbin = 20)
create_bins(ll = 1, ul = 100, numbin = 20)
create_bins(ll = 1, ul = 101, numbin = 20)
create_bins(ll = 1, ul = 101, numbin = 19)
check()
check()
use_mit_license()
writeLines(readLines("LICENSE"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("flowCore")
BiocManager::install("flowWorkspace")
BiocManager::install("ggcyto")
BiocManager::install("flowViz")
library(flowWorkspace)
library(flowCore)
getwd()
gh_pop_get_data
paste(c("row","col"),"bin")
paste(c("row","col"),"_bin",sep = "")
check()
library(devtools)
install.packages(c("callr", "devtools", "DT", "evaluate", "gert", "htmltools", "interp", "pillar", "processx", "quantreg", "rlang", "roxygen2", "stringi", "tibble", "xfun"))
library(devtools)
load_all
load_all()
exists("create_bins", where = globalenv(), inherits = FALSE)
exists("binning_channel", where = globalenv(), inherits = FALSE)
check()
72/12
colSums(c(1,2,3,4,5))
colSums(matrix(c(1,2,3,4,5,6), nrow = 2)
)
check()
library(devtools)
check()
!(TRUE)
! TRUE
!(FALSE)
! FALSE
library(devtools)
document()
?cyto_binning
check()
check()
check()
use_package("flowWorkspace")
check()
check()
use_package("flowCore")
check()
document()
library(devtools)
document()
?cyto_binning
?create_bins
?prepare_gh
?binning_channel
devtools()
library(devtools)
system.file("extdata", package "cytobins")
system.file("extdata", package = "cytobins")
system.file("extdata", "phyto_flowcyt_sample", package = "cytobins")
system.file("extdata/phyto_flowcyt_sample", "phyto_flowcyt_sample.h5", package = "cytobins")
system.file("extdata", "phyto_flowcyt_sample.h5", package = "cytobins")
cyto_binning()
load_all()
system.file("extdata", "phyto_flowcyt_sample", package = "cytobins")
library(flowCore)
library(flowWorkspace)
load_gs(path(system.file("extdata", "phyto_flowcyt_sample", package = "cytobins")))
load_gs(path = system.file("extdata", "phyto_flowcyt_sample", package = "cytobins"))
load_gs(path = system.file("extdata", "phyto_flowcyt_sample", package = "cytobins"))[[1]]
plot(load_gs(path = system.file("extdata", "phyto_flowcyt_sample", package = "cytobins"))[[1]])
prepare_gh(system.file("extdata", "phyto_flowcyt_sample", package = "cytobins"), prepnode = "chl", channel = 1:2)
prepare_gh(system.file("extdata", "phyto_flowcyt_sample", package = "cytobins"), prepnode = "root", channel = 1:2)
prepare_gh(system.file("extdata", "phyto_flowcyt_sample", package = "cytobins")[[1]], prepnode = "chl", channel = 1:2)
prepare_gh(load_gs(path(system.file("extdata", "phyto_flowcyt_sample", package = "cytobins")))[[1]], prepnode = "chl", channel = 1:2)
load_gs(path(system.file("extdata", "phyto_flowcyt_sample", package = "cytobins")))[[1]]
prepare_gh(load_gs(pat = system.file("extdata", "phyto_flowcyt_sample", package = "cytobins"))[[1]], prepnode = "chl", channel = 1:2)
library(devtools)
check()
load_all()
system.file("extdata", "phyto_flowcyt_sample", package = "readr")
system.file("extdata/phyto_flowcyt_sample", package = "readr")
system.file("extdata", "phyto_flowcyt_sample", package = "readr")
system.file("extdata", "phyto_flowcyt_sample", package = "cytobins")
phyto_gs   <- load_gs(path = system.file("extdata", "phyto_flowcyt_sample", package = "cytobins"))
library(flowCore)
library(flowWorkspace)
phyto_gs   <- load_gs(path = system.file("extdata", "phyto_flowcyt_sample", package = "cytobins"))
head(gh_pop_get_data(phyto_gs))
min(gh_pop_get_data(phyto_gs)[,1])
gh_pop_get_data(phyto_gs)[,1]
exprs(gh_pop_get_data(phyto_gs)[,1])
min(exprs(gh_pop_get_data(phyto_gs)[,1]))
max(exprs(gh_pop_get_data(phyto_gs)[,1]))
max(exprs(gh_pop_get_data(phyto_gs)[,9]))
min(exprs(gh_pop_get_data(phyto_gs)[,9]))
check()
check()
create_bins(xlimits[1], xlimits[2], binnumber)
create_bins(0, 6, 64)
str(create_bins(0, 6, 64))
binning_channel <- function(channel_vec, bins) {
tot_counter  <- 1
bincounter   <- 1
bin_index    <- vector(length = length(channel_vec))
while(tot_counter <= length(channel_vec)) {
while(channel_vec[tot_counter] < bins[bincounter,2]) {
bin_index[tot_counter] <- bincounter
tot_counter <- tot_counter + 1
if(tot_counter > length(channel_vec)) {
break
}
}
bincounter <- bincounter + 1
}
return(bin_index)
}
str(create_bins(0, 6, 64))
binning_channel(runif(10000, 0,6) ,create_bins(0, 6, 64))
options(max.print = 10000000)
binning_channel(runif(10000, 0,6) ,create_bins(0, 6, 64))
create_bins(0, 6, 64)
runif(10000, 0,6)
binning_channel(runif(100, 0,6) ,create_bins(0, 6, 64))
tot_counter
create_bins(0, 6, 64)[1,2]
create_bins(0, 6, 64)[,2]
create_bins(0, 6, 64)[1:2,2]
create_bins(0, 6, 64)[1:2,]
binning_channel(runif(100, 0,6) ,create_bins(0, 6, 64))
phyto_bins <- cyto_binning(gh = phyto_gh, node = "chl", channels = c(1,9),
xlimits = c(2,6), ylimits = c(2,6), binnumber = 64)
library(flowCore)
library(flowWorkspace)
phyto_bins <- cyto_binning(gh = phyto_gh, node = "chl", channels = c(1,9),
xlimits = c(2,6), ylimits = c(2,6), binnumber = 64)
phyto_gs   <- load_gs(path = system.file("extdata", "phyto_flowcyt_sample", package = "cytobins"))
phyto_gh   <- phyto_gs[[1]]
phyto_bins <- cyto_binning(gh = phyto_gh, node = "chl", channels = c(1,9),
xlimits = c(2,6), ylimits = c(2,6), binnumber = 64)
phyto_bins <- cyto_binning(gh = phyto_gh, node = "chl", channels = c(1,9), xlimits = c(2,6), ylimits = c(2,6), binnumber = 64)
test <- prepare_gh(phyto_gh, node = "chl", channels = c(1,9))
test <- prepare_gh(phyto_gh, prepnode = "chl", channels = c(1,9))
test <- prepare_gh(phyto_gh, prepnode = "chl", channel = c(1,9))
test
min(test[,1])
max(test[,1])
min(test[,2])
max(test[,2])
